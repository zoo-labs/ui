{
  "name": "animated-list",
  "description": "List with staggered animations",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "name": "animated-list.tsx",
      "content": "\"use client\"\n\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\"\nimport { AnimatePresence, motion, Reorder, Variants } from \"motion/react\"\n\nimport { cn } from \"@/lib/utils\"\n\n/**\n * Custom hook to detect prefers-reduced-motion\n */\nfunction usePrefersReducedMotion(): boolean {\n  const [prefersReducedMotion, setPrefersReducedMotion] = useState(false)\n\n  useEffect(() => {\n    if (typeof window === \"undefined\") return\n\n    const mediaQuery = window.matchMedia(\"(prefers-reduced-motion: reduce)\")\n    setPrefersReducedMotion(mediaQuery.matches)\n\n    const handleChange = (event: MediaQueryListEvent) => {\n      setPrefersReducedMotion(event.matches)\n    }\n\n    mediaQuery.addEventListener(\"change\", handleChange)\n    return () => mediaQuery.removeEventListener(\"change\", handleChange)\n  }, [])\n\n  return prefersReducedMotion\n}\n\nexport interface AnimatedListItem {\n  id: string | number\n  content: React.ReactNode\n  data?: any\n}\n\nexport interface AnimatedListProps {\n  /**\n   * List items to render\n   */\n  items: AnimatedListItem[]\n  /**\n   * Animation type for list items\n   */\n  animation?:\n    | \"slide\"\n    | \"fade\"\n    | \"scale\"\n    | \"slideUp\"\n    | \"slideDown\"\n    | \"slideLeft\"\n    | \"slideRight\"\n  /**\n   * Stagger delay between items in milliseconds\n   */\n  staggerDelay?: number\n  /**\n   * Animation duration for each item in milliseconds\n   */\n  duration?: number\n  /**\n   * Whether list items are reorderable\n   */\n  reorderable?: boolean\n  /**\n   * Whether to enable add/remove animations\n   */\n  enableAddRemove?: boolean\n  /**\n   * Layout type\n   */\n  layout?: \"vertical\" | \"horizontal\" | \"grid\"\n  /**\n   * Grid columns (for grid layout)\n   */\n  gridColumns?: number\n  /**\n   * Custom CSS class\n   */\n  className?: string\n  /**\n   * Custom item CSS class\n   */\n  itemClassName?: string\n  /**\n   * Custom styling\n   */\n  style?: React.CSSProperties\n  /**\n   * Callback when items are reordered\n   */\n  onReorder?: (items: AnimatedListItem[]) => void\n  /**\n   * Callback when item is clicked\n   */\n  onItemClick?: (item: AnimatedListItem, index: number) => void\n  /**\n   * Whether to show hover effects\n   */\n  showHoverEffects?: boolean\n  /**\n   * Custom variants for animations\n   */\n  customVariants?: Variants\n  /**\n   * Whether list is virtualized (for performance)\n   */\n  virtualized?: boolean\n  /**\n   * Item height for virtualization\n   */\n  itemHeight?: number\n  /**\n   * Container height for virtualization\n   */\n  containerHeight?: number\n  /**\n   * Whether to auto-start animations\n   */\n  autoStart?: boolean\n  /**\n   * Callback when all animations complete\n   */\n  onAnimationComplete?: () => void\n}\n\nconst slideVariants: Variants = {\n  hidden: { opacity: 0, x: -50 },\n  visible: (i: number) => ({\n    opacity: 1,\n    x: 0,\n    transition: {\n      delay: i * 0.1,\n      duration: 0.5,\n      ease: \"easeOut\",\n    },\n  }),\n  exit: { opacity: 0, x: 50, transition: { duration: 0.3 } },\n}\n\nconst fadeVariants: Variants = {\n  hidden: { opacity: 0 },\n  visible: (i: number) => ({\n    opacity: 1,\n    transition: {\n      delay: i * 0.1,\n      duration: 0.5,\n      ease: \"easeOut\",\n    },\n  }),\n  exit: { opacity: 0, transition: { duration: 0.3 } },\n}\n\nconst scaleVariants: Variants = {\n  hidden: { opacity: 0, scale: 0.8 },\n  visible: (i: number) => ({\n    opacity: 1,\n    scale: 1,\n    transition: {\n      delay: i * 0.1,\n      duration: 0.5,\n      ease: \"easeOut\",\n      type: \"spring\",\n      stiffness: 100,\n    },\n  }),\n  exit: { opacity: 0, scale: 0.8, transition: { duration: 0.3 } },\n}\n\nconst slideUpVariants: Variants = {\n  hidden: { opacity: 0, y: 50 },\n  visible: (i: number) => ({\n    opacity: 1,\n    y: 0,\n    transition: {\n      delay: i * 0.1,\n      duration: 0.5,\n      ease: \"easeOut\",\n    },\n  }),\n  exit: { opacity: 0, y: -50, transition: { duration: 0.3 } },\n}\n\nconst slideDownVariants: Variants = {\n  hidden: { opacity: 0, y: -50 },\n  visible: (i: number) => ({\n    opacity: 1,\n    y: 0,\n    transition: {\n      delay: i * 0.1,\n      duration: 0.5,\n      ease: \"easeOut\",\n    },\n  }),\n  exit: { opacity: 0, y: 50, transition: { duration: 0.3 } },\n}\n\nconst slideLeftVariants: Variants = {\n  hidden: { opacity: 0, x: 50 },\n  visible: (i: number) => ({\n    opacity: 1,\n    x: 0,\n    transition: {\n      delay: i * 0.1,\n      duration: 0.5,\n      ease: \"easeOut\",\n    },\n  }),\n  exit: { opacity: 0, x: -50, transition: { duration: 0.3 } },\n}\n\nconst slideRightVariants: Variants = {\n  hidden: { opacity: 0, x: -50 },\n  visible: (i: number) => ({\n    opacity: 1,\n    x: 0,\n    transition: {\n      delay: i * 0.1,\n      duration: 0.5,\n      ease: \"easeOut\",\n    },\n  }),\n  exit: { opacity: 0, x: 50, transition: { duration: 0.3 } },\n}\n\nconst animationVariants = {\n  slide: slideVariants,\n  fade: fadeVariants,\n  scale: scaleVariants,\n  slideUp: slideUpVariants,\n  slideDown: slideDownVariants,\n  slideLeft: slideLeftVariants,\n  slideRight: slideRightVariants,\n}\n\n/**\n * Custom hook for virtualized list rendering\n */\nfunction useVirtualizedList(\n  items: AnimatedListItem[],\n  containerHeight: number,\n  itemHeight: number,\n  enabled: boolean\n) {\n  const [scrollTop, setScrollTop] = useState(0)\n\n  const visibleItems = useMemo(() => {\n    if (!enabled) return items\n\n    const startIndex = Math.floor(scrollTop / itemHeight)\n    const endIndex = Math.min(\n      startIndex + Math.ceil(containerHeight / itemHeight) + 1,\n      items.length\n    )\n\n    return items.slice(startIndex, endIndex).map((item, index) => ({\n      ...item,\n      virtualIndex: startIndex + index,\n      style: {\n        position: \"absolute\" as const,\n        top: (startIndex + index) * itemHeight,\n        height: itemHeight,\n        width: \"100%\",\n      },\n    }))\n  }, [items, scrollTop, itemHeight, containerHeight, enabled])\n\n  const totalHeight = items.length * itemHeight\n\n  const handleScroll = useCallback((e: React.UIEvent<HTMLDivElement>) => {\n    setScrollTop(e.currentTarget.scrollTop)\n  }, [])\n\n  return {\n    visibleItems,\n    totalHeight,\n    handleScroll,\n  }\n}\n\n/**\n * Animated list component with stagger animations and reordering\n */\nexport function AnimatedList({\n  items,\n  animation = \"slideUp\",\n  staggerDelay = 100,\n  duration = 500,\n  reorderable = false,\n  enableAddRemove = true,\n  layout = \"vertical\",\n  gridColumns = 3,\n  className,\n  itemClassName,\n  style,\n  onReorder,\n  onItemClick,\n  showHoverEffects = true,\n  customVariants,\n  virtualized = false,\n  itemHeight = 60,\n  containerHeight = 400,\n  autoStart = true,\n  onAnimationComplete,\n}: AnimatedListProps) {\n  const [animatedItems, setAnimatedItems] = useState(items)\n  const [animationKey, setAnimationKey] = useState(0)\n  const prefersReducedMotion = usePrefersReducedMotion()\n\n  const variants = customVariants || animationVariants[animation]\n  const shouldAnimate = !prefersReducedMotion && autoStart\n\n  const { visibleItems, totalHeight, handleScroll } = useVirtualizedList(\n    items,\n    containerHeight,\n    itemHeight,\n    virtualized\n  )\n\n  // Update animated items when items change\n  useEffect(() => {\n    setAnimatedItems(items)\n  }, [items])\n\n  // Update stagger delay in variants\n  const updatedVariants = useMemo(() => {\n    if (!variants.visible || typeof variants.visible !== \"function\")\n      return variants\n\n    return {\n      ...variants,\n      visible: (i: number) => {\n        // eslint-disable-next-line\n        const original = variants.visible as (i: number) => any\n        const originalResult = original(i)\n        return {\n          ...originalResult,\n          transition: {\n            ...originalResult.transition,\n            delay: i * (staggerDelay / 1000),\n            duration: duration / 1000,\n          },\n        }\n      },\n    }\n  }, [variants, staggerDelay, duration])\n\n  const getLayoutClassName = () => {\n    switch (layout) {\n      case \"horizontal\":\n        return \"flex flex-row gap-4 overflow-x-auto\"\n      case \"grid\":\n        return `grid gap-4 grid-cols-${gridColumns}`\n      default:\n        return \"flex flex-col gap-4\"\n    }\n  }\n\n  const renderListItem = (\n    item: AnimatedListItem,\n    index: number,\n    virtualStyle?: React.CSSProperties\n  ) => {\n    const itemContent = (\n      <motion.div\n        key={item.id}\n        custom={index}\n        variants={updatedVariants}\n        initial={shouldAnimate ? \"hidden\" : \"visible\"}\n        animate=\"visible\"\n        exit=\"exit\"\n        layout={enableAddRemove}\n        className={cn(\n          \"cursor-pointer select-none\",\n          showHoverEffects && \"hover:scale-105 transition-transform\",\n          itemClassName\n        )}\n        style={virtualStyle}\n        onClick={() => onItemClick?.(item, index)}\n        whileHover={showHoverEffects ? { scale: 1.02 } : undefined}\n        whileTap={showHoverEffects ? { scale: 0.98 } : undefined}\n        onAnimationComplete={() => {\n          if (index === animatedItems.length - 1) {\n            onAnimationComplete?.()\n          }\n        }}\n      >\n        {item.content}\n      </motion.div>\n    )\n\n    return itemContent\n  }\n\n  if (reorderable && !virtualized) {\n    return (\n      <Reorder.Group\n        axis={layout === \"horizontal\" ? \"x\" : \"y\"}\n        values={animatedItems}\n        onReorder={(newItems) => {\n          setAnimatedItems(newItems)\n          onReorder?.(newItems)\n        }}\n        className={cn(getLayoutClassName(), className)}\n        style={style}\n      >\n        <AnimatePresence mode=\"popLayout\">\n          {animatedItems.map((item, index) => (\n            <Reorder.Item\n              key={item.id}\n              value={item}\n              className={cn(\n                \"cursor-grab active:cursor-grabbing\",\n                itemClassName\n              )}\n              whileDrag={{ scale: 1.05, zIndex: 10 }}\n            >\n              {item.content}\n            </Reorder.Item>\n          ))}\n        </AnimatePresence>\n      </Reorder.Group>\n    )\n  }\n\n  if (virtualized) {\n    return (\n      <div\n        className={cn(\"overflow-auto\", className)}\n        style={{ height: containerHeight, ...style }}\n        onScroll={handleScroll}\n      >\n        <div style={{ height: totalHeight, position: \"relative\" }}>\n          <AnimatePresence mode=\"popLayout\">\n            {visibleItems.map((item, index) =>\n              renderListItem(item, item.virtualIndex || index, item.style)\n            )}\n          </AnimatePresence>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <motion.div\n      className={cn(getLayoutClassName(), className)}\n      style={style}\n      initial=\"hidden\"\n      animate=\"visible\"\n      key={animationKey}\n    >\n      <AnimatePresence mode=\"popLayout\">\n        {animatedItems.map((item, index) => renderListItem(item, index))}\n      </AnimatePresence>\n    </motion.div>\n  )\n}\n\n/**\n * Preset animated list variations\n */\nexport const AnimatedListPresets = {\n  /**\n   * Simple fade in list\n   */\n  FadeList: (props: Omit<AnimatedListProps, \"animation\">) => (\n    <AnimatedList animation=\"fade\" {...props} />\n  ),\n\n  /**\n   * Scale up from center\n   */\n  ScaleList: (props: Omit<AnimatedListProps, \"animation\">) => (\n    <AnimatedList animation=\"scale\" {...props} />\n  ),\n\n  /**\n   * Slide up from bottom\n   */\n  SlideUpList: (props: Omit<AnimatedListProps, \"animation\">) => (\n    <AnimatedList animation=\"slideUp\" {...props} />\n  ),\n\n  /**\n   * Horizontal carousel-style list\n   */\n  CarouselList: (props: Omit<AnimatedListProps, \"layout\" | \"animation\">) => (\n    <AnimatedList layout=\"horizontal\" animation=\"slideLeft\" {...props} />\n  ),\n\n  /**\n   * Grid with scale animation\n   */\n  GridList: (props: Omit<AnimatedListProps, \"layout\" | \"animation\">) => (\n    <AnimatedList layout=\"grid\" animation=\"scale\" {...props} />\n  ),\n\n  /**\n   * Reorderable task list\n   */\n  TaskList: (props: Omit<AnimatedListProps, \"reorderable\" | \"animation\">) => (\n    <AnimatedList reorderable animation=\"slideUp\" showHoverEffects {...props} />\n  ),\n}\n\nexport default AnimatedList\n"
    }
  ],
  "type": "components:animation"
}