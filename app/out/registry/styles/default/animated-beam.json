{
  "name": "animated-beam",
  "description": "Animated beam connection effect",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "name": "animated-beam.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { motion } from \"motion/react\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface AnimatedBeamProps extends React.HTMLAttributes<HTMLDivElement> {\n  duration?: number\n  delay?: number\n  pathColor?: string\n  pathWidth?: number\n  gradientStartColor?: string\n  gradientStopColor?: string\n  containerRef?: React.RefObject<HTMLElement>\n  fromRef?: React.RefObject<HTMLElement>\n  toRef?: React.RefObject<HTMLElement>\n}\n\nconst AnimatedBeam = React.forwardRef<HTMLDivElement, AnimatedBeamProps>(\n  (\n    {\n      className,\n      duration = 3,\n      delay = 0,\n      pathColor = \"gray\",\n      pathWidth = 2,\n      gradientStartColor = \"#18CCFC\",\n      gradientStopColor = \"#6344F5\",\n      containerRef,\n      fromRef,\n      toRef,\n      ...props\n    },\n    ref\n  ) => {\n    const [pathD, setPathD] = React.useState(\"\")\n\n    React.useEffect(() => {\n      if (!containerRef?.current || !fromRef?.current || !toRef?.current) return\n\n      const updatePath = () => {\n        const containerRect = containerRef.current!.getBoundingClientRect()\n        const fromRect = fromRef.current!.getBoundingClientRect()\n        const toRect = toRef.current!.getBoundingClientRect()\n\n        const fromX = fromRect.left - containerRect.left + fromRect.width / 2\n        const fromY = fromRect.top - containerRect.top + fromRect.height / 2\n        const toX = toRect.left - containerRect.left + toRect.width / 2\n        const toY = toRect.top - containerRect.top + toRect.height / 2\n\n        const controlX = (fromX + toX) / 2\n        const controlY = Math.min(fromY, toY) - 50\n\n        setPathD(`M ${fromX} ${fromY} Q ${controlX} ${controlY} ${toX} ${toY}`)\n      }\n\n      updatePath()\n      window.addEventListener(\"resize\", updatePath)\n      return () => window.removeEventListener(\"resize\", updatePath)\n    }, [containerRef, fromRef, toRef])\n\n    return (\n      <svg\n        ref={ref}\n        className={cn(\"pointer-events-none absolute inset-0\", className)}\n        {...props}\n      >\n        <path\n          d={pathD}\n          stroke={pathColor}\n          strokeWidth={pathWidth}\n          fill=\"none\"\n          strokeOpacity={0.2}\n        />\n        <motion.path\n          d={pathD}\n          stroke={`url(#gradient-${gradientStartColor}-${gradientStopColor})`}\n          strokeWidth={pathWidth}\n          fill=\"none\"\n          initial={{ pathLength: 0 }}\n          animate={{ pathLength: 1 }}\n          transition={{\n            duration,\n            delay,\n            ease: \"easeInOut\",\n            repeat: Infinity,\n          }}\n        />\n        <defs>\n          <linearGradient\n            id={`gradient-${gradientStartColor}-${gradientStopColor}`}\n            x1=\"0%\"\n            y1=\"0%\"\n            x2=\"100%\"\n            y2=\"0%\"\n          >\n            <stop offset=\"0%\" stopColor={gradientStartColor} />\n            <stop offset=\"100%\" stopColor={gradientStopColor} />\n          </linearGradient>\n        </defs>\n      </svg>\n    )\n  }\n)\n\nAnimatedBeam.displayName = \"AnimatedBeam\"\n\nexport { AnimatedBeam }\n"
    }
  ],
  "type": "components:ui"
}