{
  "name": "ai-assistant",
  "description": "Full-featured AI assistant component",
  "dependencies": [
    "@hanzo/ui"
  ],
  "files": [
    {
      "name": "ai-assistant.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Bot, MessageSquare, Settings, Sparkles, User } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n} from \"@/registry/default/ui/avatar\"\nimport { Badge } from \"@/registry/default/ui/badge\"\nimport { Button } from \"@/registry/default/ui/button\"\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/default/ui/card\"\nimport { ScrollArea } from \"@/registry/default/ui/scroll-area\"\nimport { Separator } from \"@/registry/default/ui/separator\"\nimport { Textarea } from \"@/registry/default/ui/textarea\"\n\nexport interface AIAssistantProps extends React.HTMLAttributes<HTMLDivElement> {\n  provider?: string\n  model?: string\n  apiKey?: string\n  systemPrompt?: string\n  tools?: Array<{ name: string; description: string; parameters?: any }>\n  onResponse?: (response: any) => void\n  onError?: (error: Error) => void\n  messages?: Array<{\n    id: string\n    role: \"user\" | \"assistant\" | \"system\"\n    content: string\n    timestamp: Date\n  }>\n  onSendMessage?: (message: string) => void\n  isLoading?: boolean\n  placeholder?: string\n  showAvatar?: boolean\n  showTimestamp?: boolean\n}\n\nconst AIAssistant = React.forwardRef<HTMLDivElement, AIAssistantProps>(\n  (\n    {\n      className,\n      children,\n      provider = \"openai\",\n      model = \"gpt-4\",\n      messages = [],\n      onSendMessage,\n      isLoading = false,\n      placeholder = \"Ask the AI assistant anything...\",\n      showAvatar = true,\n      showTimestamp = true,\n      tools = [],\n      ...props\n    },\n    ref\n  ) => {\n    const [input, setInput] = React.useState(\"\")\n    const scrollRef = React.useRef<HTMLDivElement>(null)\n\n    // Auto-scroll to bottom when new messages arrive\n    React.useEffect(() => {\n      if (scrollRef.current) {\n        scrollRef.current.scrollTop = scrollRef.current.scrollHeight\n      }\n    }, [messages])\n\n    const handleSend = () => {\n      if (!input.trim() || isLoading) return\n      onSendMessage?.(input)\n      setInput(\"\")\n    }\n\n    const handleKeyPress = (e: React.KeyboardEvent) => {\n      if (e.key === \"Enter\" && !e.shiftKey) {\n        e.preventDefault()\n        handleSend()\n      }\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\"flex h-full w-full flex-col\", className)}\n        {...props}\n      >\n        {/* Header */}\n        <div className=\"flex items-center justify-between border-b p-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"flex h-10 w-10 items-center justify-center rounded-full bg-primary/10\">\n              <Sparkles className=\"h-5 w-5 text-primary\" />\n            </div>\n            <div>\n              <h3 className=\"font-semibold\">AI Assistant</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                {provider} â€¢ {model}\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            {tools.length > 0 && (\n              <Badge variant=\"secondary\">{tools.length} tools</Badge>\n            )}\n            <Button variant=\"ghost\" size=\"icon\">\n              <Settings className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Messages */}\n        <ScrollArea ref={scrollRef} className=\"flex-1 p-4\">\n          <div className=\"space-y-4\">\n            {messages.length === 0 ? (\n              <div className=\"flex flex-col items-center justify-center py-8 text-center\">\n                <MessageSquare className=\"h-12 w-12 text-muted-foreground/50 mb-4\" />\n                <h4 className=\"text-lg font-medium text-muted-foreground\">\n                  Start a conversation\n                </h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Ask me anything and I'll do my best to help!\n                </p>\n              </div>\n            ) : (\n              messages.map((message) => (\n                <div\n                  key={message.id}\n                  className={cn(\n                    \"flex gap-3\",\n                    message.role === \"user\" ? \"flex-row-reverse\" : \"flex-row\"\n                  )}\n                >\n                  {showAvatar && (\n                    <Avatar className=\"h-8 w-8 shrink-0\">\n                      <AvatarFallback>\n                        {message.role === \"user\" ? (\n                          <User className=\"h-4 w-4\" />\n                        ) : (\n                          <Bot className=\"h-4 w-4\" />\n                        )}\n                      </AvatarFallback>\n                    </Avatar>\n                  )}\n                  <div\n                    className={cn(\n                      \"flex max-w-[80%] flex-col space-y-1\",\n                      message.role === \"user\" ? \"items-end\" : \"items-start\"\n                    )}\n                  >\n                    {showTimestamp && (\n                      <span className=\"text-xs text-muted-foreground\">\n                        {message.timestamp.toLocaleTimeString()}\n                      </span>\n                    )}\n                    <div\n                      className={cn(\n                        \"rounded-lg px-3 py-2 text-sm\",\n                        message.role === \"user\"\n                          ? \"bg-primary text-primary-foreground\"\n                          : \"bg-muted\"\n                      )}\n                    >\n                      <div className=\"whitespace-pre-wrap\">\n                        {message.content}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n            {isLoading && (\n              <div className=\"flex gap-3\">\n                <Avatar className=\"h-8 w-8 shrink-0\">\n                  <AvatarFallback>\n                    <Bot className=\"h-4 w-4\" />\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"bg-muted rounded-lg px-3 py-2 text-sm\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"flex space-x-1\">\n                      <div className=\"h-2 w-2 animate-bounce rounded-full bg-current [animation-delay:-0.3s]\" />\n                      <div className=\"h-2 w-2 animate-bounce rounded-full bg-current [animation-delay:-0.15s]\" />\n                      <div className=\"h-2 w-2 animate-bounce rounded-full bg-current\" />\n                    </div>\n                    <span>AI is thinking...</span>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </ScrollArea>\n\n        {/* Input */}\n        <div className=\"border-t p-4\">\n          <div className=\"flex space-x-2\">\n            <Textarea\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder={placeholder}\n              disabled={isLoading}\n              className=\"min-h-[60px] resize-none\"\n              rows={2}\n            />\n            <Button\n              onClick={handleSend}\n              disabled={!input.trim() || isLoading}\n              size=\"icon\"\n              className=\"shrink-0\"\n            >\n              <MessageSquare className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        {children}\n      </div>\n    )\n  }\n)\nAIAssistant.displayName = \"AIAssistant\"\n\nexport { AIAssistant }\n"
    }
  ],
  "type": "components:ai"
}